#ifdef GL_ES
#define LOWP lowp
precision mediump float;
#else
#define LOWP 
#endif

struct Light{
	vec3 pos;
	vec4 color;	
};

//attributes from vertex shader
varying LOWP vec4 vColor;
varying vec2 vTexCoord;

//our texture samplers
uniform sampler2D u_texture;   //diffuse map
uniform sampler2D u_normals;   //normal map

//values used for shading algorithm...
uniform vec2 Resolution;         //resolution of screen
uniform LOWP vec4 AmbientColor;  //ambient RGBA -- alpha is intensity 
uniform vec3 Falloff;            //attenuation coefficients
uniform Light lightarray[100];


void main() {

	//RGBA of our diffuse color
	vec4 DiffuseColor = texture2D(u_texture, vTexCoord);

	vec3 sum = vec3(0.0);
	for(int i = 0; i < 100; i ++){
		Light light = lightarray[i];
		
		if(light.color.a == 0.0) break;
	
		//RGB of our normal map
		vec3 NormalMap = texture2D(u_normals, vTexCoord).rgb;
	
		//The delta position of light
		vec3 LightDir = vec3(light.pos.xy - (gl_FragCoord.xy / Resolution.xy), light.pos.z);
	
		//Correct for aspect ratio
		LightDir.x *= Resolution.x / Resolution.y;
	
		//Determine distance (used for attenuation) BEFORE we normalize our LightDir
		float D = length(LightDir);
	
		//normalize our vectors
		vec3 N = normalize(NormalMap * 2.0 - 1.0);
		vec3 L = normalize(LightDir);
	
		//Pre-multiply light color with intensity
		//Then perform "N dot L" to determine our diffuse term
		vec3 Diffuse = (light.color.rgb * light.color.a) * max(dot(N, L), 0.0);

		//pre-multiply ambient color with intensity
		//vec3 Ambient = AmbientColor.rgb * AmbientColor.a;
	
		//calculate attenuation
		float Attenuation = 1.0 / ( Falloff.x + (Falloff.y*D) + (Falloff.z*D*D) );
	
		//the calculation which brings it all together
		vec3 Intensity = Diffuse * Attenuation;
		vec3 FinalColor = DiffuseColor.rgb * Intensity;
		
		sum += FinalColor;
	}
	
	gl_FragColor = vColor * vec4(sum + (AmbientColor.rgb * AmbientColor.a)*DiffuseColor.rgb, DiffuseColor.a);
}
